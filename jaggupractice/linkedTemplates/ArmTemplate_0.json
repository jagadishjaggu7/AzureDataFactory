{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "jaggupractice"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"BlobInput_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'BlobInput'"
		},
		"OutputStorageSQL_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'OutputStorageSQL'"
		},
		"OutputStorageSQL_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "itsdemoserver.database.windows.net"
		},
		"OutputStorageSQL_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "jaggupractice"
		},
		"OutputStorageSQL_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jagadish"
		},
		"triggerWhenNew FileAdded_properties_pipeline1_parameters_Filename": {
			"type": "string",
			"defaultValue": "customers-10000"
		},
		"triggerWhenNew FileAdded_properties_pipeline1_parameters_Stg_TableName": {
			"type": "string",
			"defaultValue": "Stg_CustomerData"
		},
		"triggerWhenNew FileAdded_properties_pipeline1_parameters_ContainerName": {
			"type": "string",
			"defaultValue": "jagguinput"
		},
		"triggerWhenNew FileAdded_properties_pipeline1_parameters_StagingTables": {
			"type": "string",
			"defaultValue": "Final_Stg_CustomerData,Stg_CustomerData"
		},
		"triggerWhenNew FileAdded_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/60c38991-bea0-4220-b74a-3db010183ee8/resourceGroups/azurelearn/providers/Microsoft.Storage/storageAccounts/demofordatafactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobInput')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('BlobInput_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputStorageSQL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('OutputStorageSQL_properties_typeProperties_server')]",
					"database": "[parameters('OutputStorageSQL_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('OutputStorageSQL_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('OutputStorageSQL_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputStorageSQL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputStorageSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputStorageSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "IndexID",
						"type": "varchar"
					},
					{
						"name": "CustomerId",
						"type": "varchar"
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					},
					{
						"name": "Company",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "varchar"
					},
					{
						"name": "Country",
						"type": "varchar"
					},
					{
						"name": "Phone 1",
						"type": "varchar"
					},
					{
						"name": "Phone 2",
						"type": "varchar"
					},
					{
						"name": "Email",
						"type": "varchar"
					},
					{
						"name": "SubscriptionDate",
						"type": "date"
					},
					{
						"name": "Website",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Final_Stg_CustomerData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputStorageSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobInput",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					},
					"Container": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(dataset().FileName,'.csv')",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Index",
						"type": "String"
					},
					{
						"name": "Customer Id",
						"type": "String"
					},
					{
						"name": "First Name",
						"type": "String"
					},
					{
						"name": "Last Name",
						"type": "String"
					},
					{
						"name": "Company",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Phone 1",
						"type": "String"
					},
					{
						"name": "Phone 2",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "Subscription Date",
						"type": "String"
					},
					{
						"name": "Website",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BlobInput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/backupdataOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "jaggubackupforoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "RemoveColumnsFanmeLname",
							"description": "Autogenerated by data preview actions"
						},
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Index as integer,",
						"          CustomerId as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Company as string,",
						"          City as string,",
						"          Country as string,",
						"          {Phone 1} as string,",
						"          {Phone 2} as string,",
						"          Email as string,",
						"          SubscriptionDate as string,",
						"          Website as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(Name = concat(FirstName,LastName),",
						"          SubscriptionDate = toDate(SubscriptionDate, 'dd-MM-yyyy')) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Index,",
						"          Name,",
						"          CustomerId,",
						"          Company,",
						"          City,",
						"          Country,",
						"          {Phone 1},",
						"          {Phone 2},",
						"          Email,",
						"          SubscriptionDate,",
						"          Website",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveColumnsFanmeLname",
						"RemoveColumnsFanmeLname sort(asc(SubscriptionDate, true)) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     input(",
						"          IndexID as string,",
						"          CustomerId as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Company as string,",
						"          City as string,",
						"          Country as string,",
						"          {Phone 1} as string,",
						"          {Phone 2} as string,",
						"          Email as string,",
						"          SubscriptionDate as date,",
						"          Website as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Validation1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@pipeline().parameters.Filename",
										"type": "Expression"
									},
									"Container": {
										"value": "@pipeline().parameters.ContainerName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "dbo",
									"TableName": {
										"value": "@pipeline().parameters.StagingTables",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Validation1",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@pipeline().parameters.Filename",
										"type": "Expression"
									},
									"Container": {
										"value": "@pipeline().parameters.ContainerName",
										"type": "Expression"
									}
								}
							},
							"timeout": "0.12:00:00",
							"sleep": 10
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"Schema": "dbo",
										"TableName": {
											"value": "@pipeline().parameters.StagingTables",
											"type": "Expression"
										}
									},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "IndexID",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Index",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "CustomerId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CustomerId",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Company",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Company",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "City",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Country",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Country",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Phone 1",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Phone 1",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Phone 2",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Phone 2",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Email",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Email",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SubscriptionDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "SubscriptionDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Website",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Website",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {
									"Schema": {
										"value": "@pipeline().parameters.Schema",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.MainTable",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "SuccessfulMail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-02.northcentralus.logic.azure.com:443/workflows/a5c5726b78d045ceb0bef4ea2d4c9fa9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=_yNBvJc_-XoFYlCxePxq_LsLPqK8IzPitdjWEb8_0M4",
							"body": {
								"value": "{\n    \"color\": \"Green\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"message\": \"Running is finished, have a great day\",\n    \"pipelineName\": \"@{pipeline().Pipeline}\",\n    \"pipelineRunId\": \"@{pipeline().RunId}\",\n    \"time\": \"@{utcNow()}\",\n    \"title\": \"pipelineName RUN FINISHED\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "FailedMail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data2",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-05.northcentralus.logic.azure.com:443/workflows/ea588d9039a1414b8ab98d93a6947f40/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=KJx9b8dFX0UKWQbKDBtoESWb1TBuiB7gDigu5_4Dmv0",
							"body": {
								"value": "{\n    \"color\": \"Red\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"message\": \"Pipeline Not Executed, See the details\",\n    \"pipelineName\": \"@{pipeline().Pipeline}\",\n    \"pipelineRunId\": \"@{pipeline().RunId}\",\n    \"time\": \"@{utcNow()}\",\n    \"title\": \"pipelineName RUN FINISHED\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Fail1",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": {
								"value": "Error has raised while copying the data from blob to sql",
								"type": "Expression"
							},
							"errorCode": "40001"
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data2",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[TruncateStagingTables]",
							"storedProcedureParameters": {
								"TableNames": {
									"value": {
										"value": "@pipeline().parameters.StagingTables",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "OutputStorageSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "backupdatatoblob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Index",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Index",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "CustomerId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CustomerId",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Company",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Company",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "City",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Country",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Country",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Phone 1",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Phone 1",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Phone 2",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Phone 2",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Email",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Email",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "SubscriptionDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "SubscriptionDate",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Website",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Website",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {
									"Schema": {
										"value": "@pipeline().parameters.Schema",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.MainTable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "backupdataOutput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Filename": {
						"type": "string",
						"defaultValue": "customers-10000"
					},
					"Stg_TableName": {
						"type": "string",
						"defaultValue": "Stg_CustomerData"
					},
					"ContainerName": {
						"type": "string",
						"defaultValue": "jagguinput"
					},
					"StagingTables": {
						"type": "string",
						"defaultValue": "Final_Stg_CustomerData,Stg_CustomerData"
					},
					"MainTable": {
						"type": "string",
						"defaultValue": "CustomerData"
					},
					"Schema": {
						"type": "string",
						"defaultValue": "dbo"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-09-15T10:01:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable2')]",
				"[concat(variables('factoryId'), '/linkedServices/OutputStorageSQL')]",
				"[concat(variables('factoryId'), '/datasets/backupdataOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/triggerWhenNew FileAdded')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pipeline1",
							"type": "PipelineReference"
						},
						"parameters": {
							"Filename": "[parameters('triggerWhenNew FileAdded_properties_pipeline1_parameters_Filename')]",
							"Stg_TableName": "[parameters('triggerWhenNew FileAdded_properties_pipeline1_parameters_Stg_TableName')]",
							"ContainerName": "[parameters('triggerWhenNew FileAdded_properties_pipeline1_parameters_ContainerName')]",
							"StagingTables": "[parameters('triggerWhenNew FileAdded_properties_pipeline1_parameters_StagingTables')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/jagguinput/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('triggerWhenNew FileAdded_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline1')]"
			]
		}
	]
}